import socketio
import time
import json
import random
from datetime import datetime

# Kh·ªüi t·∫°o Socket.IO client
sio = socketio.Client(logger=False, engineio_logger=False)

# Th√¥ng tin k·∫øt n·ªëi
SERVER_URL = "http://localhost:5000"  # Thay th·∫ø b·∫±ng ƒë·ªãa ch·ªâ th·ª±c t·∫ø c·ªßa server
API_KEY = "1d05a3f5-f2c8-46dc-873c-4c87e0af26ab"  # API key c·ªßa client kari
DEVICE_NAME = "python_test_device"

# Topic m·∫∑c ƒë·ªãnh
SENSOR_TOPIC = "sensors"  # Topic chung cho t·∫•t c·∫£ d·ªØ li·ªáu c·∫£m bi·∫øn
TEMPERATURE_TOPIC = "temperature"  # Topic ri√™ng cho nhi·ªát ƒë·ªô
HUMIDITY_TOPIC = "humidity"  # Topic ri√™ng cho ƒë·ªô ·∫©m
PRESSURE_TOPIC = "pressure"  # Topic ri√™ng cho √°p su·∫•t
LIGHT_TOPIC = "light"  # Topic ri√™ng cho √°nh s√°ng

# ƒê·ªãnh nghƒ©a c√°c callback
@sio.event
def connect():
    print("ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi Socket.IO server!")
    register_device()

@sio.event
def connect_error(data):
    print(f"L·ªói k·∫øt n·ªëi: {data}")

@sio.event
def disconnect():
    print("ƒê√£ ng·∫Øt k·∫øt n·ªëi t·ª´ server")

@sio.on('response')
def on_response(data):
    print(f"Nh·∫≠n ƒë∆∞·ª£c response t·ª´ server: {data}")

@sio.on('error')
def on_error(data):
    print(f"Nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o l·ªói: {data}")

def register_device():
    """ƒêƒÉng k√Ω thi·∫øt b·ªã v·ªõi server."""
    print("ƒêƒÉng k√Ω thi·∫øt b·ªã v·ªõi server...")
    
    # T·∫°o th√¥ng tin ƒëƒÉng k√Ω
    data = {
        "api_key": API_KEY,
        "device": DEVICE_NAME,
        "action": "register",
        "capabilities": "temperature,humidity,pressure,light"
    }
    
    # G·ª≠i ƒëƒÉng k√Ω
    sio.emit('device_register', data)

def create_standard_measurement(value, unit, type, timestamp=None):
    """T·∫°o c·∫•u tr√∫c d·ªØ li·ªáu chu·∫©n cho ph√©p ƒëo."""
    if timestamp is None:
        timestamp = time.time()
        
    return {
        "value": value,
        "unit": unit,
        "type": type,
        "timestamp": timestamp
    }

def send_combined_sensor_data(topic_name=SENSOR_TOPIC):
    """G·ª≠i t·∫•t c·∫£ d·ªØ li·ªáu c·∫£m bi·∫øn trong m·ªôt payload th·ªëng nh·∫•t."""
    # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n cho c√°c c·∫£m bi·∫øn
    temperature = round(random.uniform(20, 30), 2)
    humidity = round(random.uniform(40, 80), 2)
    pressure = round(random.uniform(980, 1020), 2)
    light = round(random.uniform(0, 1000), 2)
    
    # T·∫°o timestamp chung cho t·∫•t c·∫£ c√°c ph√©p ƒëo
    timestamp = time.time()
    
    # T·∫°o payload v·ªõi c·∫•u tr√∫c chu·∫©n
    data = {
        "api_key": API_KEY,
        "device": DEVICE_NAME,
        "topic": topic_name,
        "payload": {
            "measurements": [
                create_standard_measurement(temperature, "celsius", "temperature", timestamp),
                create_standard_measurement(humidity, "percent", "humidity", timestamp),
                create_standard_measurement(pressure, "hPa", "pressure", timestamp),
                create_standard_measurement(light, "lux", "light", timestamp)
            ],
            "source": "python_test",
            "device_time": timestamp
        }
    }
    
    print(f"ƒêang g·ª≠i t·∫•t c·∫£ d·ªØ li·ªáu c·∫£m bi·∫øn l√™n topic '{topic_name}':")
    print(f" - Nhi·ªát ƒë·ªô: {temperature}¬∞C")
    print(f" - ƒê·ªô ·∫©m: {humidity}%")
    print(f" - √Åp su·∫•t: {pressure} hPa")
    print(f" - √Ånh s√°ng: {light} lux")
    
    sio.emit('telemetry', data)
    print("ƒê√£ g·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn th√†nh c√¥ng.")

def send_sensor_data(value, unit, sensor_type, topic_name):
    """G·ª≠i d·ªØ li·ªáu m·ªôt lo·∫°i c·∫£m bi·∫øn v·ªõi c·∫•u tr√∫c chu·∫©n."""
    # T·∫°o payload v·ªõi c·∫•u tr√∫c chu·∫©n
    data = {
        "api_key": API_KEY,
        "device": DEVICE_NAME,
        "topic": topic_name,
        "payload": {
            "measurements": [
                create_standard_measurement(value, unit, sensor_type)
            ],
            "source": "python_test",
            "device_time": time.time()
        }
    }
    
    print(f"ƒêang g·ª≠i d·ªØ li·ªáu {sensor_type}: {value} {unit}")
    sio.emit('telemetry', data)
    print(f"ƒê√£ g·ª≠i d·ªØ li·ªáu {sensor_type} th√†nh c√¥ng.")

def send_temperature_data():
    """G·ª≠i d·ªØ li·ªáu nhi·ªát ƒë·ªô theo c·∫•u tr√∫c chu·∫©n."""
    temperature = round(random.uniform(20, 30), 2)
    send_sensor_data(temperature, "celsius", "temperature", TEMPERATURE_TOPIC)

def send_humidity_data():
    """G·ª≠i d·ªØ li·ªáu ƒë·ªô ·∫©m theo c·∫•u tr√∫c chu·∫©n."""
    humidity = round(random.uniform(40, 80), 2)
    send_sensor_data(humidity, "percent", "humidity", HUMIDITY_TOPIC)

def send_pressure_data():
    """G·ª≠i d·ªØ li·ªáu √°p su·∫•t theo c·∫•u tr√∫c chu·∫©n."""
    pressure = round(random.uniform(980, 1020), 2)
    send_sensor_data(pressure, "hPa", "pressure", PRESSURE_TOPIC)

def send_light_data():
    """G·ª≠i d·ªØ li·ªáu √°nh s√°ng theo c·∫•u tr√∫c chu·∫©n."""
    light = round(random.uniform(0, 1000), 2)
    send_sensor_data(light, "lux", "light", LIGHT_TOPIC)

def send_custom_data():
    """G·ª≠i d·ªØ li·ªáu t√πy ch·ªânh v·ªõi c·∫•u tr√∫c chu·∫©n."""
    topic_name = input("\nNh·∫≠p t√™n topic: ")
    
    if not topic_name or not topic_name.strip():
        print("T√™n topic kh√¥ng h·ª£p l·ªá!")
        return
    
    try:
        print("\nNh·∫≠p th√¥ng tin:")
        sensor_type = input("Lo·∫°i d·ªØ li·ªáu (vd: temperature, wind_speed, ...): ")
        value = float(input("Gi√° tr·ªã: "))
        unit = input("ƒê∆°n v·ªã ƒëo (vd: celsius, m/s, ...): ")
        
        # T·∫°o payload theo c·∫•u tr√∫c chu·∫©n
        data = {
            "api_key": API_KEY,
            "device": DEVICE_NAME,
            "topic": topic_name.strip(),
            "payload": {
                "measurements": [
                    create_standard_measurement(value, unit, sensor_type)
                ],
                "source": "python_test",
                "device_time": time.time()
            }
        }
        
        print(f"ƒêang g·ª≠i d·ªØ li·ªáu t√πy ch·ªânh l√™n topic '{topic_name.strip()}'...")
        sio.emit('telemetry', data)
        print("ƒê√£ g·ª≠i d·ªØ li·ªáu t√πy ch·ªânh th√†nh c√¥ng.")
        
    except ValueError:
        print("L·ªói: Gi√° tr·ªã kh√¥ng h·ª£p l·ªá!")
    except Exception as e:
        print(f"L·ªói khi g·ª≠i d·ªØ li·ªáu: {e}")

def send_all_data_separately():
    """G·ª≠i t·∫•t c·∫£ c√°c lo·∫°i d·ªØ li·ªáu l√™n t·ª´ng topic ri√™ng bi·ªát."""
    send_temperature_data()
    time.sleep(1)
    send_humidity_data()
    time.sleep(1)
    send_pressure_data()
    time.sleep(1)
    send_light_data()
    print("\nƒê√£ g·ª≠i t·∫•t c·∫£ c√°c lo·∫°i d·ªØ li·ªáu th√†nh c√¥ng (ph∆∞∆°ng th·ª©c ri√™ng bi·ªát).")

def send_advanced_custom_data():
    """G·ª≠i d·ªØ li·ªáu t√πy ch·ªânh v·ªõi c·∫•u tr√∫c JSON ho√†n to√†n t√πy ch·ªânh."""
    topic_name = input("\nNh·∫≠p t√™n topic: ")
    
    if not topic_name or not topic_name.strip():
        print("T√™n topic kh√¥ng h·ª£p l·ªá!")
        return
    
    try:
        print("\nNh·∫≠p d·ªØ li·ªáu t√πy ch·ªânh (ƒë·ªãnh d·∫°ng JSON):")
        print("V√≠ d·ª•: {\"measurements\": [{\"value\": 27.5, \"unit\": \"celsius\", \"type\": \"temperature\"}]}")
        
        custom_data_str = input("D·ªØ li·ªáu JSON: ")
        custom_data = json.loads(custom_data_str)
        
        # T·∫°o payload
        data = {
            "api_key": API_KEY,
            "device": DEVICE_NAME,
            "topic": topic_name.strip(),
            "payload": custom_data
        }
        
        print(f"ƒêang g·ª≠i d·ªØ li·ªáu t√πy ch·ªânh l√™n topic '{topic_name.strip()}'...")
        sio.emit('telemetry', data)
        print("ƒê√£ g·ª≠i d·ªØ li·ªáu t√πy ch·ªânh th√†nh c√¥ng.")
        
    except json.JSONDecodeError:
        print("L·ªói: D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá!")
    except Exception as e:
        print(f"L·ªói khi g·ª≠i d·ªØ li·ªáu: {e}")

def continuous_send_data():
    """G·ª≠i d·ªØ li·ªáu li√™n t·ª•c v·ªõi kho·∫£ng th·ªùi gian 10 gi√¢y."""
    try:
        count = 1
        while True:
            print(f"\n[L·∫ßn {count}] ƒêang g·ª≠i d·ªØ li·ªáu...")
            send_combined_sensor_data()
            count += 1
            print(f"ƒê·ª£i 10 gi√¢y cho l·∫ßn g·ª≠i ti·∫øp theo...")
            time.sleep(10)
    except KeyboardInterrupt:
        print("\nƒê√£ d·ª´ng g·ª≠i d·ªØ li·ªáu li√™n t·ª•c.")

def display_menu():
    """Hi·ªÉn th·ªã menu cho ng∆∞·ªùi d√πng."""
    print("\n" + "="*60)
    print("üîß CH∆Ø∆†NG TR√åNH G·ª¨I D·ªÆ LI·ªÜU SOCKET.IO (C·∫§U TR√öC CHU·∫®N)")
    print("="*60)
    print("1. G·ª≠i t·∫•t c·∫£ d·ªØ li·ªáu c·∫£m bi·∫øn (nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, √°p su·∫•t, √°nh s√°ng) l√™n m·ªôt topic")
    print("2. G·ª≠i d·ªØ li·ªáu nhi·ªát ƒë·ªô l√™n topic ri√™ng bi·ªát")
    print("3. G·ª≠i d·ªØ li·ªáu ƒë·ªô ·∫©m l√™n topic ri√™ng bi·ªát")
    print("4. G·ª≠i d·ªØ li·ªáu √°p su·∫•t l√™n topic ri√™ng bi·ªát")
    print("5. G·ª≠i d·ªØ li·ªáu √°nh s√°ng l√™n topic ri√™ng bi·ªát")
    print("6. G·ª≠i t·∫•t c·∫£ lo·∫°i d·ªØ li·ªáu l√™n c√°c topic ri√™ng bi·ªát")
    print("7. G·ª≠i d·ªØ li·ªáu t√πy ch·ªânh v·ªõi c·∫•u tr√∫c chu·∫©n")
    print("8. G·ª≠i d·ªØ li·ªáu JSON t√πy ch·ªânh ho√†n to√†n")
    print("9. G·ª≠i d·ªØ li·ªáu li√™n t·ª•c (10 gi√¢y/l·∫ßn)")
    print("0. Tho√°t")
    print("="*60)
    return input("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")

def main():
    try:
        print(f"K·∫øt n·ªëi t·ªõi Socket.IO server: {SERVER_URL}")
        # K·∫øt n·ªëi v·ªõi timeout ƒë·ªÉ tr√°nh treo
        sio.connect(SERVER_URL, wait_timeout=10, transports=['websocket', 'polling'])
        
        # V√≤ng l·∫∑p menu
        while True:
            choice = display_menu()
            
            if choice == "1":
                send_combined_sensor_data()
            elif choice == "2":
                send_temperature_data()
            elif choice == "3":
                send_humidity_data()
            elif choice == "4":
                send_pressure_data()
            elif choice == "5":
                send_light_data()
            elif choice == "6":
                send_all_data_separately()
            elif choice == "7":
                send_custom_data()
            elif choice == "8":
                send_advanced_custom_data()
            elif choice == "9":
                continuous_send_data()
            elif choice == "0":
                break
            else:
                print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i!")
        
        # Ng·∫Øt k·∫øt n·ªëi
        if sio.connected:
            sio.disconnect()
        
    except Exception as e:
        print(f"L·ªói: {e}")
        if sio.connected:
            sio.disconnect()

if __name__ == "__main__":
    # C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
    try:
        # Ki·ªÉm tra n·∫øu c√°c g√≥i ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
        import subprocess
        import sys
        
        # C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
        print("ƒê·∫£m b·∫£o c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt ƒë∆∞·ª£c c√†i ƒë·∫∑t...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "python-socketio[client]", "websocket-client"])
        print("ƒê√£ c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt.")
    except Exception as e:
        print(f"L·ªói khi c√†i ƒë·∫∑t th∆∞ vi·ªán: {e}")
        print("Vui l√≤ng c√†i ƒë·∫∑t th·ªß c√¥ng: pip install python-socketio[client] websocket-client")
    
    main()